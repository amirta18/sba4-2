package com.asses.user.demo.model;

import javax.persistence.Entity;
import javax.persistence.Id;

@Entity
public class DxcUsers {

	@Id
	int userId;
	String userName;
	String password;
	String security_question;
	String security_answer;
	public int getUserId() {
		return userId;
	}
	public void setUserId(int dxcuserId) {
		this.userId = dxcuserId;
	}
	public String getUserName() {
		return userName;
	}
	public void setUserName(String userName) {
		this.userName = userName;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
	public String getSecurity_question() {
		return security_question;
	}
	public void setSecurity_question(String security_question) {
		this.security_question = security_question;
	}
	public String getSecurity_answer() {
		return security_answer;
	}
	public void setSecurity_answer(String security_answer) {
		this.security_answer = security_answer;
	}
	public DxcUsers(int userId, String userName, String password, String security_question, String security_answer) {
		super();
		this.userId = userId;
		this.userName = userName;
		this.password = password;
		this.security_question = security_question;
		this.security_answer = security_answer;
	}
	@Override
	public String toString() {
		return "DxcUsers [userId=" + userId + ", userName=" + userName + ", password=" + password
				+ ", security_question=" + security_question + ", security_answer=" + security_answer + "]";
	}

	public DxcUsers() {
		// TODO Auto-generated constructor stub
	}
}




dao

package com.asses.user.demo.dao;
import com.asses.user.demo.model.DxcUsers;

import javax.transaction.Transactional;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;



@Component
@Transactional
public class DxcUsersDao {

	@Autowired
	SessionFactory sessionFactor;


public String saveUser(DxcUsers dxcUsers)
{
try
{
Session session=sessionFactor.getCurrentSession();
session.save(dxcUsers);

return "user created";
}
catch (Exception e) {
// TODO: handle exception
e.printStackTrace();
}
return "cannot create user";
}

public DxcUsers getUserById(int userId){
	try{
		Session session=sessionFactor.getCurrentSession();
	DxcUsers dxcUsers=(DxcUsers)session.get(DxcUsers.class,userId);
	return dxcUsers;
	}
	catch (Exception e) {
	e.printStackTrace();
	}
	return null;
	}
public String updateUserById(DxcUsers dxcUsers){
	try{
	Session session=sessionFactor.getCurrentSession();
	session.update("DxcUsers",dxcUsers);
	return "Password Updated";
	}
	catch (Exception e) {
	e.printStackTrace();
	}
	return "Cannot Update Password";
	}

	/*
	 * public DxcUsers getDetails(int userId) { try { Session
	 * session=sessionFactor.getCurrentSession(); DxcUsers
	 * dxcUsers=session.get(DxcUsers.class, userId); return dxcUsers; } catch
	 * (Exception e) { e.printStackTrace(); } return null; }
	 */


public String updatePassword(int userId, String password) {
	try {
		Session session=sessionFactor.getCurrentSession();
		Query query=session.createQuery("update DxcUsers set password=:password where userId=:userId");
		query.setParameter("userId", userId);
		query.setParameter("password", password);
		int res=query.executeUpdate();
		if(res>0)
			return "Updated";
	} catch (Exception e) {
		e.printStackTrace();
	}
	return "Cannot update";
}


}



//hmecntrler

package com.asses.user.demo;
import com.asses.user.demo.model.*;
import com.asses.user.demo.dao.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;



@Controller
public class HomeController {

	@Autowired
	DxcUsersDao dao;

	//Returns home

	@RequestMapping(value = "/")
	public String home(Model model) {
		return "home";
	}
	@RequestMapping(value = "/home")
	public String homee(Model model) {
		return "home";
	}

	@RequestMapping(value="/New User")
	public String newUser(Model model)
	{
	return "Signup";
	}

	@RequestMapping(value="/display")
	public String display(Model model,@ModelAttribute DxcUsers dxcusers)
	{
	String status=dao.saveUser(dxcusers);
	model.addAttribute("status",status);
	System.out.println(status);
	return "display";
	}

int userId=0;
@RequestMapping(value="/validateUser")
public String validateUser(Model model,@RequestParam("userId") String userId,@RequestParam("password") String password )
{
	int dxcuserId=Integer.parseInt(userId);
	this.userId=dxcuserId;
	DxcUsers dxcUsers=dao.getUserById(dxcuserId);
	String dxcPassword=dxcUsers.getPassword();
	System.out.println(dxcPassword);
	System.out.println(password);
	System.out.println(dxcUsers);

		 if((dxcUsers != null)&&(dxcPassword.equals(password)))
		 {
			 System.out.println("login successful"); 
			 return "LoginSuccess";
		 }
		 else 
	     {
			 System.out.println("failed");
			 return "LoginFailed";
	     }
		}


	  @RequestMapping(value="/ForgotPassword") 
	  public String forgotPassword(Model model) { 
		  return "ChangePassword"; 
		  }

	  @RequestMapping(value="/ChangePassword") 
	  public String passwordModification(Model model,@RequestParam("userId") String userId,@RequestParam("security_question") String security_question,@RequestParam("security_answer") String security_answer)
	  {
	  int dxcuserId=Integer.parseInt(userId); this.userId=dxcuserId; DxcUsers
	  dxcUsers=dao.getUserById(dxcuserId); String
	  dxcSecurity_question=dxcUsers.getSecurity_question(); String
	  dxcSecurity_answer=dxcUsers.getSecurity_answer();

	  System.out.println(dxcSecurity_question);
	  System.out.println(dxcSecurity_answer); System.out.println(dxcUsers);

	  if((dxcUsers !=null)&&(dxcSecurity_answer.equalsIgnoreCase(security_answer))&&(dxcSecurity_question.equalsIgnoreCase(security_question))) {
	  System.out.println("login successful"); 
	  return "ForgotPassword";
	  }
	  else 
	  {
	  System.out.println("failed"); 
	  return "SecurityInvalid"; 
	  } 
	  }

	  DxcUsers dxcusers;



	  @RequestMapping(value = "/changePassword")
		public String changePassword(Model model, 
				@RequestParam("password") String password)
	  {
				String s=dao.updatePassword(userId, password);
				System.out.println(s);
				return "changePasswordSuccess";
		}




}